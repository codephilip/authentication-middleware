{
  "info": {
    "_postman_id": "auth-middleware-collection",
    "name": "Auth Middleware API",
    "description": "Complete collection for testing the Auth Middleware API endpoints with proper authentication flow",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health & Documentation",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API Documentation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api-docs",
              "host": ["{{baseUrl}}"],
              "path": ["api-docs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is HTML\", function () {",
                  "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"123\",\n    \"email\": \"test@example.com\",\n    \"roles\": [\"USER\"],\n    \"permissions\": [\"READ\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has message and tokens\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('tokens');",
                  "    pm.expect(jsonData.message).to.eql('Login successful');",
                  "});",
                  "",
                  "pm.test(\"Tokens are present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.tokens).to.have.property('accessToken');",
                  "    pm.expect(jsonData.tokens).to.have.property('refreshToken');",
                  "});",
                  "",
                  "pm.test(\"Cookies are set\", function () {",
                  "    pm.expect(pm.response.cookies).to.have.length.above(0);",
                  "    var hasAccessToken = false;",
                  "    var hasRefreshToken = false;",
                  "    pm.response.cookies.each(function(cookie) {",
                  "        if (cookie.name === 'accessToken') hasAccessToken = true;",
                  "        if (cookie.name === 'refreshToken') hasRefreshToken = true;",
                  "    });",
                  "    pm.expect(hasAccessToken).to.be.true;",
                  "    pm.expect(hasRefreshToken).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login with Admin Role",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"456\",\n    \"email\": \"admin@example.com\",\n    \"roles\": [\"ADMIN\"],\n    \"permissions\": [\"READ\", \"WRITE\", \"ADMIN_ACCESS\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Admin login successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Login successful');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has message and accessToken\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "    pm.expect(jsonData.message).to.eql('Token refreshed');",
                  "});",
                  "",
                  "pm.test(\"New access token is provided\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.accessToken).to.be.a('string');",
                  "    pm.expect(jsonData.accessToken.length).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/logout",
              "host": ["{{baseUrl}}"],
              "path": ["logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has logout message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Logged out successfully');",
                  "});",
                  "",
                  "pm.test(\"Cookies are cleared\", function () {",
                  "    // Check that cookies are cleared by looking for Set-Cookie headers with Max-Age=0",
                  "    var cookiesCleared = false;",
                  "    pm.response.headers.each(function(header) {",
                  "        if (header.key === 'Set-Cookie' && header.value.includes('Max-Age=0')) {",
                  "            cookiesCleared = true;",
                  "        }",
                  "    });",
                  "    pm.expect(cookiesCleared).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Public Endpoints",
      "item": [
        {
          "name": "Public Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/public",
              "host": ["{{baseUrl}}"],
              "path": ["api", "public"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has public message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Public endpoint');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Protected Endpoints",
      "item": [
        {
          "name": "User Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/user",
              "host": ["{{baseUrl}}"],
              "path": ["api", "user"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.message).to.eql('User endpoint');",
                  "});",
                  "",
                  "pm.test(\"User object has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('roles');",
                  "    pm.expect(jsonData.user).to.have.property('permissions');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has admin data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.message).to.eql('Admin endpoint');",
                  "});",
                  "",
                  "pm.test(\"User has admin permissions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.permissions).to.include('ADMIN_ACCESS');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Rate Limited Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/limited",
              "host": ["{{baseUrl}}"],
              "path": ["api", "limited"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has limited message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Rate limited endpoint');",
                  "});",
                  "",
                  "pm.test(\"Rate limiting headers are present\", function () {",
                  "    // Check for rate limiting headers",
                  "    var hasRateLimitHeader = false;",
                  "    pm.response.headers.each(function(header) {",
                  "        if (header.key.toLowerCase().includes('rate') || header.key.toLowerCase().includes('limit')) {",
                  "            hasRateLimitHeader = true;",
                  "        }",
                  "    });",
                  "    // This test might fail if rate limiting headers are not implemented",
                  "    // pm.expect(hasRateLimitHeader).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Token Management",
      "item": [
        {
          "name": "Revoke User Tokens",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/revoke",
              "host": ["{{baseUrl}}"],
              "path": ["api", "revoke"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has revoke message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Tokens revoked');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Access Protected Endpoint Without Auth",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/user",
              "host": ["{{baseUrl}}"],
              "path": ["api", "user"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Clear cookies to simulate no authentication",
                  "pm.cookies.clear();"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.eql('Please login to continue');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Access Admin Endpoint Without Permission",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Clear cookies to simulate no authentication",
                  "pm.cookies.clear();"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Generate CSRF token if not exists",
          "if (!pm.environment.get('csrfToken')) {",
          "    pm.environment.set('csrfToken', pm.variables.replaceIn('{{$guid}}'));",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
} 